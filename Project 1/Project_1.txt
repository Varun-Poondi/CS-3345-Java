Project #1

Due Dates:  Saturday, September 25 at 11:59pm 

Submit:    eLearning

Late Policy:  24-hour late period, then zero

Instructions: This is an individual assignment.  Answers should be your own work.



Introduction:

In this project you will create a generic linked list using
Java Generics.



Description:

   Create a generic class called GenLinkedList.  GenLinkedList will use nodes
   that store a value of the generic type to store its contents.

   It should have the following methods.  The methods should 
   all operate on the object making the call (none are static).  

   Perform checking of the parameters and throw exceptions where 
   appropriate.

   The linked list should be singly-linked.

   It should not use sentinel nodes (empty header and tail nodes).  

   You should strive for an efficient implementation of each method.


7 points each (a-h)

   a.  addFront
        receives an item to add as a parameter, and adds to the front of the list.

   b.  addEnd
        receives an item to add as a parameter, and adds to the end of the list.

   c.  removeFront
        removes a node from the front of the list.

   d.  removeEnd
        removes a node from the end of the list.

   e.  set
        receives a position and item as parameters, sets the element at this
        position, provided it is within the current size

   f.  get
        receives a position as a parameter, returns the item at this position,
        provided it is within the current size

   g.  swap
        receives two index positions as parameters, and swaps the nodes at
        these positions (not just the values inside the nodes), provided 
        both positions are within the current size

   h.  shift
        receives an integer as a parameter, and shifts the list forward or
        backward this number of nodes, provided it is within the current size
           1,2,3,4,5    shifted +2    3,4,5,1,2
           1,2,3,4,5    shifted -1    5,1,2,3,4

11 points each (i-l)
   i.  removeMatching
        receives a value of the generic type as a parameter and removes all
        occurrences of this value from the list.

   j.  erase 
        receives an index position and number of elements as parameters, and
        removes elements beginning at the index position for the number of 
        elements specified, provided the index position is within the size
        and together with the number of elements does not exceed the size

   k.  insertList
        receives a generic List (a Java List) and an index position as parameters, 
        and copies each value of the passed list into the current list starting
        at the index position, provided the index position does not exceed the size.
        For example, if list has a,b,c and another list having 1,2,3 is inserted at
        position 2, the list becomes a,b,1,2,3,c

   l.  main
        add code to the main method to demonstrate each of your methods
  

Submit to eLearning:
 GenLinkedList.java
 
 
         //Testing Phase
         
         /***********************/
         //Create Linked List using front and back methods.
         test.print(); //Linked List is Currently Empty.
         test.addEnd(10);
         test.addEnd(20);
         test.addEnd(30);
         test.addEnd(40);
         
         test.addFront(33);
         test.addFront(56);
         test.addFront(72);
         test.addFront(93);
         
         test.print(); //Output: Current Linked List: 93 72 56 33 10 20 30 40 
         /***********************/
         //Remove nodes from the front and the end of the linked list.
         test.removeFront(); 
         test.print(); //Output: Current Linked List: 72 56 33 10 20 30 40
         test.removeFront(); 
         test.print(); //Output: Current Linked List: 56 33 10 20 30 40
         
         test.removeEnd(); 
         test.print(); //Output: Current Linked List: 56 33 10 20 30 
         test.removeEnd(); 
         test.print(); //Output: Current Linked List: 56 33 10 20 
         /***********************/
         //Get and Set Payload at given position
         if(test.get(2) != null){
             System.out.println("Payload at position 2: " + test.get(2));
         }else{
             System.out.println("Required position is out of bounds.");
         }
         //Output: Payload at position 2: 10
 
         if(test.get(10) != null){
             System.out.println("Payload at position 2: " + test.get(2));
         }else{
             System.out.println("Required position is out of bounds.");
         }
         //Output: Required position is out of bounds.
         
         test.set(2,99);
         test.set(1,420);
         test.print(); //Output: Current Linked List: 56 420 99 20
 
         /***********************/
         //Swap two nodes
         System.out.println("\nSwap Nodes Test: ");
         test.print();
         test.swap(1,2); 
         test.print(); ////Output: Current Linked List: 56 99 420 20 
         // test.swap(1,4); //Should give error message 
         test.swap(0,3);
         test.print();
         /***********************/
         //Tests removeMatching, erase, insertList methods 
         GenLinkedList<Integer> newTest = new GenLinkedList<>();
         System.out.println("\nLinked List 2");
         newTest.addFront(29);
         newTest.addFront(33);
         newTest.addFront(29);
         newTest.addFront(87);
         newTest.addFront(29);
         newTest.addFront(389);
         newTest.addFront(29);
         newTest.print();
         
         newTest.removeMatching(29);
         newTest.print();
         
         newTest.addFront(87);
         newTest.print();
         newTest.removeMatching(87);
         newTest.print();
         
         System.out.println("Current Linked List Size: " + newTest.getSize());
         newTest.print();
         
         
         
                             Node<T> traverse = head1;
                             Node<T> previous = null;
                             boolean copyNotFinished = true;
                             if(traverse != null) {
                                 while (copyNotFinished) {
                                     while (traverse.getNext() != null) {
                                         previous = traverse;
                                         traverse = traverse.getNext();
                                     }
         
                                     if (previous != null) {
                                         previous.setNext(traverse.getNext());
                                     }
                                     
         
                                     traverse = head1;
                                     if (head1.getPayload() == head2.getPayload()) {
                                         copyNotFinished = false;
                                     }
                                 }
                             }
/Library/Java/JavaVirtualMachines/amazon-corretto-11.jdk/Contents/Home/bin/java -javaagent:/Applications/IntelliJ IDEA CE.app/Contents/lib/idea_rt.jar=51517:/Applications/IntelliJ IDEA CE.app/Contents/bin -Dfile.encoding=UTF-8 -classpath /Users/varunpoondi/Documents/UTD Freshman Year 2020-2021/Sophomore Year/CS 3345/Projects/CS-3345-Java/Project 1/out/production/Project 1 GenLinkedList
____________ addFront() and addEnd() Test ____________
Linked List is Currently Empty.

Test #1:
Adding to the front
Current Linked List: 1 
Current Linked List: 2 1 
Current Linked List: 1310 2 1 
Current Linked List: 29029 1310 2 1 

Test #2:
Adding to the end
Current Linked List: 29029 1310 2 1 10 
Current Linked List: 29029 1310 2 1 10 20 
Current Linked List: 29029 1310 2 1 10 20 30 
Current Linked List: 29029 1310 2 1 10 20 30 40 

____________ removeFront() and removeEnd() Test ____________
Current Linked List: 29029 1310 2 1 10 20 30 40 

Test #1:
Removing from Front
Current Linked List: 1310 2 1 10 20 30 40 
Current Linked List: 2 1 10 20 30 40 

Test #2:
Removing from End
Current Linked List: 2 1 10 20 30 
Current Linked List: 2 1 10 20 

____________ get() and set() Test ____________
Current Linked List: 2 1 10 20 

Test #1:
Getting Node Payload
Payload at position 2: 10

Test #2:
Getting Node payload at index that is out of bounds. Get Node at pos 10
Required position is out of bounds.

Test #1:
Setting Node Payload at pos 2 to 99
Current Linked List: 2 1 99 20 

Test #2:
Setting Node Payload at pos 1 to 420
Current Linked List: 2 420 99 20 

____________ shift () Test ____________
Current Linked List: 99 20 1 2 3 4 5 6 

Test #1:
Shift + 5 (left)
Current Linked List: 4 5 6 99 20 1 2 3 

Test #2:
Shift + 2 (left)
Current Linked List: 6 99 20 1 2 3 4 5 

Test #3:
Shift + 8 (left) -> Exception handled
Shift val is out of bounds, too positive.
Shift Val 8 , LL Size: 8
Current Linked List: 6 99 20 1 2 3 4 5 

Test #4:
Shift 0 -> Exception handled
Shift Val cannot be 0. No Shift was performed.
Current Linked List: 6 99 20 1 2 3 4 5 

Added Payload 7 to Linked List 1
Current Linked List: 6 99 20 1 2 3 4 5 7 

Test #5:
Shift -3 (right)
Current Linked List: 4 5 7 6 99 20 1 2 3 

Test #6:
Shift -5 (right)
Current Linked List: 99 20 1 2 3 4 5 7 6 

Test #7:
Shift -9 (left) -> Exception handled
Shift val is out of bounds, too negative.
Shift Val -9 , LL Size: 9
Current Linked List: 99 20 1 2 3 4 5 7 6 

____________ Swap Test ____________
Current Linked List: 99 20 1 2 3 4 5 7 6 

Test #1:
Swap Nodes index 2 and 0
Current Linked List: 1 20 99 2 3 4 5 7 6 

Test #2:
Swap Nodes index 1 and 2
Current Linked List: 1 99 20 2 3 4 5 7 6 

Test #3:
Swap Nodes index 1 and 3
Current Linked List: 1 2 20 99 3 4 5 7 6 

Test #4:
Swap Nodes index 0 and 2
Current Linked List: 20 2 1 99 3 4 5 7 6 

Test #5:
Swap Nodes index 0 and 8
Current Linked List: 6 2 1 99 3 4 5 7 20 

Test #6:
Swap Same Position Exception. Swap Nodes index 0 and 0
No swap performed since pos1 = pos2.
Current Linked List: 6 2 1 99 3 4 5 7 20 

____________ removeMatching() Test ____________
Test 1 is type String linked list.
Creating List 1:
Current Linked List: 10 20 30 20 40 20 

Test #1:
More than 1 delete.
Delete 20.
Current Linked List: 10 30 40 

Test #2:
1 delete.
Delete 40.
Current Linked List: 10 30 

Test #3:
Removing payload that does not exist.
Delete 99.
Payload 99 was not found in Linked List
Current Linked List: 10 30 

____________ erase() Test ____________
Current Linked List: David Henry 32 C Jack Bob 10 30 

Test #1
Erase 3 nodes at pos 1
Current Linked List: David Jack Bob 10 30 

Test #2
Erase 4 nodes at pos 3
Current Linked List: David Jack Bob 

Test #3
Erase 0 nodes at pos 2 -> Exception handled
Erase cannot be performed due to invalid erase 0. Position : 2, Limit: 0
Current Linked List: David Jack Bob 

Test #4
Erasing from position 2 to limit 100 -> Exception handled
Limit index is too large.
Must be Limit < LL Size.
Out of Bounds Exception. Limit : 100, LL Size: 3
Current Linked List: David Jack Bob 

______________ insertList() Test ______________
Linked List 1:
Current Linked List: Z Y X 

List 2:
Current Linked List: Bob Tom David Jack 

List 3:
Current Linked List: 1 2 3 4 

List 4:
Current Linked List: Hello To My Grader Bob 

List 5:
Current Linked List: Bob 

Test #1:
Insert List 2 at pos 0 in List 1. (Beginning of the linked list insert test)
Current Linked List: Bob Tom David Jack Z Y X 

Test #2:
Insert List 3 at pos 7 in List 1. (End of the linked list insert test)
Current Linked List: Bob Tom David Jack Z Y X 1 2 3 4 

Test #3:
Insert List 4 at pos 4 in List 1. (Middle of the linked list insert test)
Current Linked List: Bob Tom David Jack Hello To My Grader Bob Z Y X 1 2 3 4 

Test #4:
Insert List 5 at pos 100 in List 1. (Out of bounds exception test)
Position is too positive, position is out of bounds.
Position: 100 , LL Size:16

                             