Project #4

Due Dates:  Saturday, November 27 at 11:59pm 

Submit:    eLearning

Late Policy:  24-hour late period, then zero

Instructions: This is an individual assignment.  All work should be your own.



Objective:

     Work with the Disjoint Set data structure.

Overview:

     The Disjoint Set data structure will be used in the creation of a maze.  The algorithm to do this is discussed in the textbook in chapter 8.  

Details:

     Write a program to generate and display a maze as described in the textbook.  The program may either be a command-line program that generates a character-based maze, or it may be a GUI program that draws the maze in a window.

     The user should be able to specify the number of rows and columns in the maze, at least up to 20x20.
      
     You must use the DisjSet class from the textbook to implement the textbook's algorithm.  The DisjSet class must be used as given in the textbook without making modifications to it.

     Since this problem is one from the textbook, it is likely that there are solutions on the Internet for it, however, you may not use solutions from the Internet in any way on this project.  All work must be your own.


Submit to eLearning:
     All your *.java files
     
     
            
            
            int x = getRandomNumberInRange(0, length-2);
            int y = getRandomNumberInRange(0, length-2);
            
            // do not land on the entrance or exit
            if((x != 0 || y != 0)){
                Cells currentCell = maze[x][y];
                //System.out.println(currentCell.getIndexNumber());
                int root1 = disjSets.find(currentCell.getIndexNumber());
                int root2 = 0;
                int decision = 0;
                switch (currentCell.getCaseType()){
                    case "M":
                    case "T":
                    case "L":
                        decision = dRandom.nextInt(2);
                        if (decision == 1 && maze[x][y + 1].getRightBar().equals("|")) { 
                            try {
                                root2 = disjSets.find(maze[x][y + 1].getIndexNumber());
                                currentCell.setRightBar(" ");
                            }catch(IndexOutOfBoundsException exception){
                                System.out.println(exception.getMessage());
                                System.out.println("Merge Cell at position [" + x + "," + y + "] with Cell at position ["  + x + "," + (y+1) + "]");
                                System.out.println();
                            }
                        }else if(maze[x][y + 1].getRightBar().equals("__")){
                            try {
                                root2 = disjSets.find(maze[x + 1][y].getIndexNumber());
                                currentCell.setBottomBar("  ");
                            }catch(IndexOutOfBoundsException exception){
                                System.out.println(exception.getMessage());
                                System.out.println("Merge Cell at position [" + x + "," + y + "] with Cell at position ["  + (x+1) + "," + y + "]");
                                System.out.println();
                            }
                        }
                        break;
                    case "R":
                    case "B":
                    case "LB":
                        try {
                            root2 = disjSets.find(maze[x][y + 1].getIndexNumber());
                            currentCell.setRightBar(" ");
                        }catch(IndexOutOfBoundsException exception){
                            System.out.println(exception.getMessage());
                            System.out.println("Merge Cell at position [" + x + "," + y + "] with Cell at position ["  + x + "," + (y+1) + "]");
                            System.out.println();
                        }
                        break;
                    default:
                        break;
                }
             if(root1 != root2){
                 disjSets.union(root1, root2);
             }
            }